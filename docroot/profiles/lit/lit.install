<?php
/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function lit_install() {
	// Add text formats.
	$filtered_html_format = array(
			'format' => 'filtered_html',
			'name' => 'Filtered HTML',
			'weight' => 0,
			'filters' => array(
					// URL filter.
					'filter_url' => array(
							'weight' => 0,
							'status' => 1,
					),
					// HTML filter.
					'filter_html' => array(
							'weight' => 1,
							'status' => 1,
					),
					// Line break filter.
					'filter_autop' => array(
							'weight' => 2,
							'status' => 1,
					),
					// HTML corrector filter.
					'filter_htmlcorrector' => array(
							'weight' => 10,
							'status' => 1,
					),
			),
	);
	$filtered_html_format = (object) $filtered_html_format;
	filter_format_save($filtered_html_format);
	
	$full_html_format = array(
			'format' => 'full_html',
			'name' => 'Full HTML',
			'weight' => 1,
			'filters' => array(
					// URL filter.
					'filter_url' => array(
							'weight' => 0,
							'status' => 1,
					),
					// Line break filter.
					'filter_autop' => array(
							'weight' => 1,
							'status' => 1,
					),
					// HTML corrector filter.
					'filter_htmlcorrector' => array(
							'weight' => 10,
							'status' => 1,
					),
			),
	);
	$full_html_format = (object) $full_html_format;
	filter_format_save($full_html_format);
  // Enable some lit blocks.
  $default_theme = 'litthemezen';
  $admin_theme = 'seven';
  // disable all themes
  db_update('system')
    ->fields(array('status' => 0))
    ->condition('type', 'theme')
    ->execute();
  // enable $default_theme
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', $default_theme)
    ->execute();
  // enable $admin_theme
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', $admin_theme)
    ->execute();
  variable_set('admin_theme', $admin_theme);
  // activate admin theme when editing a node
  variable_set('node_admin_theme', '1');
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
  );
  // drop system / user blocks to ensure correct building
  db_delete('block')->condition('module', 'system')->execute();
  db_delete('block')->condition('module', 'user')->execute();
  // add in our blocks defined above
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();
  
  // From shortcut.install, add shortcuts to the default set on install
  $shortcut_set = shortcut_set_load(SHORTCUT_DEFAULT_SET_NAME);
  $shortcut_set->links = NULL;
  $shortcut_set->links = array(
    array(
      'link_path' => 'admin/appearance/settings',
      'link_title' => st('Theme'),
      'weight' => -17,
    ),
  );
  shortcut_set_save($shortcut_set);// Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 10;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
  // Update the menu router information.
  menu_rebuild();
  // create demo workshop member users
  $new_user = array(
  		'name' => 'bard',
  		'pass' => 'bard', // note: do not md5 the password
  		'mail' => 'bard@bardland.org',
  		'status' => 1,
  		'init' => 'bard@bardland.org',
  		'roles' => array(
  				DRUPAL_AUTHENTICATED_RID => 'authenticated user',
  				3 => 'demo user',
  		),
  );
  // The first parameter is sent blank so a new user is created.
  user_save('', $new_user);
  $new_user = array(
  		'name' => 'muse',
  		'pass' => 'muse', 
  		'mail' => 'muse@bardland.org',
  		'status' => 1,
  		'init' => 'muse@bardland.org',
  		'roles' => array(
  				DRUPAL_AUTHENTICATED_RID => 'authenticated user',
  				3 => 'demo user',
  		),
  );
  user_save('', $new_user);
  // revert features to ensure they are all installed
  $features = array(
    array('lit_demo_content' => TRUE),
  );
  features_revert($features);
  features_revert(array('lit_layout' => array('fe_block_settings')));
  features_revert(array('lit_layout' => array('node_export_features')));
  features_revert(array('lit_base' => array('field_base')));
// ignore any rebuild messages
  node_access_needs_rebuild(FALSE);
  // ignore any other install messages
  drupal_get_messages();
  
  // Fix authorship of demo texts
  // and set sticky field in order to mark as demo content
  // 
  // get demo users
  $uids = array();
  
  // Use $query for readability
  $query = 'SELECT DISTINCT(ur.uid)
  FROM {users_roles} AS ur
  WHERE ur.rid IN (:rids)';
  $result = db_query($query, array(':rids' => array(3)));
  
  foreach ($result as $row) {
  	$uids[] = $row->uid;
  }
  
  // users will have their uid as key
  // we need an array of uids so we use $uids directly
  // and don't load actual users
  //$users = user_load_multiple($uids);
  
  // set min and max for rand()
  $min = 0;
  $max = count($uids) - 1;
  
  // get texts
  $type = 'text';
  $nodes = node_load_multiple(array(), array('type' => $type));
  
  foreach ($nodes as $node) {
  	// get random user uid
  	$num = rand($min, $max);
  	$uid = $uids[$num];
  	// initialize node with uid
  	$node->uid = $uid;
    // mark as sticky as convention to flag demo texts and critiques
    $node->sticky = 1;
  	// save node
  	node_save($node);
  }
}
